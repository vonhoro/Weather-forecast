{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Gif","useState","searchValue","setSearchValue","cityName","setCityName","sunset","setSunset","sunrise","setSunrise","weatherDescription","setWeatherDescription","weatherMain","setWeatherMain","temperature","setTemperature","humidity","setHumidity","windSpeed","setWindSpeed","clouds","setClouds","imgUrl","setImgUrl","error","setError","sendSearch","e","a","preventDefault","fetch","responseWeather","json","dataObjectWeather","dateSunset","Date","parseInt","sys","hourSunset","getHours","toString","padStart","minutesSunset","getMinutes","timeTillSunset","dateSunrise","hourSunrise","minutesSunrise","timeTillSunrise","name","weather","description","main","temp","wind","speed","all","responseImg","dataObjectImg","data","images","original","url","console","log","className","onSubmit","type","required","placeholder","onChange","target","value","autofocus","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.706bf351.chunk.js","sourcesContent":["import React, { useState } from 'react';\n//'http://api.openweathermap.org/data/2.5/weather?q={city name},{state code},{country code}&appid=267c33939e7a04fdd9dbf811478f489c'\nfunction Gif(){\n\n   const [searchValue,setSearchValue] = useState('');\n   const [cityName,setCityName] = useState('');//cityname name\n   const [sunset,setSunset] = useState();//sys.sunset\n   const [sunrise,setSunrise] = useState();//sys.sunrise\n   const [weatherDescription,setWeatherDescription] = useState('');//some dumb astring weather[0].description\n   const [weatherMain,setWeatherMain] = useState('');//some dumb arrayy weather[0].main\n   const [temperature,setTemperature] = useState('');//Celcius main.temp\n   const [humidity,setHumidity] = useState('');//Celcius main.humidity %\n   const [windSpeed,setWindSpeed] = useState('');//wind.speed m/s\n   const [clouds,setClouds] = useState('');//cloudiness, clouds.all%\n   const [imgUrl,setImgUrl] = useState('');//cloudiness, clouds.all%\n   const [error,setError] = useState(false);\n  const sendSearch = async(e) =>{\n      e.preventDefault();\n      \n      try{\n      \n        const responseWeather = await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=267c33939e7a04fdd9dbf811478f489c&q=${searchValue}&units=metric&`\n        );\n        const dataObjectWeather = await responseWeather.json();\n        const dateSunset = new Date(parseInt(dataObjectWeather.sys.sunset)*1000);\n        const hourSunset = (dateSunset.getHours()).toString().padStart(2,0);\n        const minutesSunset = (dateSunset.getMinutes()).toString().padStart(2,0);\n        const timeTillSunset = `${hourSunset}:${minutesSunset}`;\n        const dateSunrise = new Date(parseInt(dataObjectWeather.sys.sunrise)*1000);\n        const hourSunrise = (dateSunrise.getHours()).toString().padStart(2,0);\n        const minutesSunrise = (dateSunrise.getMinutes()).toString().padStart(2,0);\n        const timeTillSunrise = `${hourSunrise}:${minutesSunrise}`;\n        setCityName(dataObjectWeather.name);\n        setSunset(timeTillSunset);\n        setSunrise(timeTillSunrise);\n        setWeatherDescription(dataObjectWeather.weather[0].description);\n        setWeatherMain(dataObjectWeather.weather[0].main);\n        setTemperature(dataObjectWeather.main.temp);\n        setHumidity(dataObjectWeather.main.humidity);\n        setWindSpeed(dataObjectWeather.wind.speed);\n        setClouds(dataObjectWeather.clouds.all);\n        const responseImg = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=w2cdSfE14rAY6cd4FiBZ17sZEuuI9syL&q=${dataObjectWeather.weather[0].main}-forecast&limit=1`);\n        const dataObjectImg = await responseImg.json();\n        setImgUrl(dataObjectImg.data[0].images.original.url)\n        setError(false);\n      }\n      catch(err){\n         console.log(err);\n         setError(true);\n      }\n   }\n  \n   return(\n      <div className=\"Container\">\n        <form className=\"Za-Formu\" onSubmit={sendSearch}>\n          <input \n            type=\"text\"\n            required\n            placeholder=\"Rome,Italy\"\n            onChange={(e)=> setSearchValue(e.target.value)}\n          />\n          <input \n            autofocus\n            type=\"submit\"\n            value=\"Search\"\n          />\n        </form>\n        <div className={(cityName === '' && !error)? 'Invisible' : ''}>\n        <h1 \n          className={(error)? 'Error' : 'Not-seen'}>\n          Be more specific!\n        </h1>\n        </div>\n        <div className={(cityName === '')? 'Invisible' : \"Weather-Data\"}>\n          <h1 className=\"Info\">City: {cityName}</h1>\n          <h1 className=\"Info\">Sunrise at: {sunrise}</h1>\n          <h1 className=\"Info\">Sunset at: {sunset}</h1>\n          <h1 className=\"Info\">Cloudines: {clouds}%</h1>\n          <h1 className=\"Info\">Weather:{weatherDescription}</h1>\n          <h1 className=\"Info\">Temperature:{temperature} ÂºC</h1>\n          <h1 className=\"Info\">Humidity: {humidity}%</h1>\n          <h1 className=\"Info\">Wind speed: {windSpeed} m/sec</h1>\n          </div>\n          <img className={(cityName === '')? \"Invsible\" : \"Gif\"} src={imgUrl} alt={weatherMain}/>\n      </div>\n   \n   )\n   \n   \n}\n\nfunction App() {\n    return (\n         <div className=\"App\">\n          <h1 className=\"Title\"> Enter the name of The city and Click on Search</h1>\n          <Gif />          \n          </div>\n          );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}